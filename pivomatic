#!/bin/bash

usage() { 
  echo -e "Usage: 
  $0 
  -t <pivnet-token> 
  -o <opsman-url> 
  -u <opsman-user> 
  -p <opsman-pass> 
  -s <product-slug> 
  -r <release>
  -i <id (optional)> \n" >&2; exit 1; }

checkcmds () {
  echo "Checking for installed scripts"

  if ! hash jq 2>/dev/null; then
    echo "Please install the latest jq as it could not be found."
    exit 1
  fi

  if ! hash pivnet 2>/dev/null; then
    echo "Please install the latest pivnet cli as it could not be found."
    exit 1
  fi

  if ! hash om-linux 2>/dev/null; then
    echo "Please install the latest om cli as it could not be found. Maybe not a Linux-User?"
    exit 1
  fi
}

login (){
  pivnet login --api-token="${TOKEN}"
}

om-upload () {
  om-linux -target $OPSMAN --skip-ssl-validation -u "${USER}" -p "${PASSWD}" upload-product --product "${STRIPPED_OBJECT_KEY}".pivotal
}

summary() {
  om-linux  -target $OPSMAN --skip-ssl-validation -u "${USER}" -p "${PASSWD}" available-products
}

download-pivnet() {
  JSON=`pivnet product-files -p $SLUG -r $RELEASE --format=json`

  if [ -z "$PRODUCTID" ]; then 
    PRODUCTID=$(echo $JSON | jq '.[] | select(.file_type =="Software").id')

    if [[ $PRODUCTID = *[[:space:]]* ]]; then
      echo "Sorry, found multiple IDs for ${SLUG}."
      echo $PRODUCTID
      echo "Consult"
      echo "  pivnet product-files -p ${SLUG} -r ${RELEASE}"
      echo "Please choose one and provide it using the -i flag."
      exit 1
    fi
  fi

  pivnet download-product-files -p $SLUG -r $RELEASE -i $PRODUCTID --accept-eula

  AWS_OBJECT_KEY=$(echo $JSON | jq ".[] | select(.file_type ==\"Software\" and .id == ${PRODUCTID}).aws_object_key")
  
  OBJECT_KEY=${AWS_OBJECT_KEY##*/}
  STRIPPED_OBJECT_KEY=${OBJECT_KEY%.*}
}

if (($# == 0))
then
  usage
fi

while getopts ":t:o:u:p:s:r:i:h" opt; do
  case $opt in
    t) TOKEN=$OPTARG
      ;;
    o) OPSMAN=$OPTARG
      ;;
    u) USER=$OPTARG
      ;;
    p) PASSWD=$OPTARG
      ;;
    s) SLUG=$OPTARG
      ;;
    r) RELEASE=$OPTARG
      ;;
    i) PRODUCTID=$OPTARG
      ;;
    h) usage
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      exit 1
      ;;
  esac
done


checkcmds
login
download-pivnet
om-upload
summary
